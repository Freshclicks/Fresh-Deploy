# Define path to cache and memory zone. The memory zone should be unique.
# keys_zone=ssl-fastcgi-cache.com:100m creates the memory zone and sets the maximum size in MBs.
# inactive=730h (one month) will remove cached items that haven't been accessed for 1 month or more.
fastcgi_cache_path {{ www_root }}/{{ inventory_hostname }}/cache levels=1:2 keys_zone={{ inventory_hostname }}:60m inactive=730h;

# Needs to exist and be writable by nginx.  Use tmpfs for best performance.
# Ncd /eeds to be above the server block
    pagespeed FileCachePath {{ www_root }}/{{ inventory_hostname }}/cache/pagespeed-cache;
    pagespeed ForceCaching on;
    pagespeed FileCacheSizeKb            1024000;
    pagespeed FileCacheCleanIntervalMs   3600000;
    pagespeed FileCacheInodeLimit        500000;

server {
    # Ports to listen on, uncomment one.
    #listen 443 ssl http2;
    #listen [::]:443 ssl http2;
    listen      80;
    listen [::]:80;
    server_name     {{ inventory_hostname }};

    root            {{ www_root }}/{{ inventory_hostname }}/public;

    index index.php index.htm index.html;

    access_log  {{ www_root }}/{{ inventory_hostname }}/log/{{ inventory_hostname }}.access.log;
    error_log   {{ www_root }}/{{ inventory_hostname }}/log/{{ inventory_hostname }}.error.log;
    pagespeed LogDir {{ www_root }}/{{ inventory_hostname }}/log/pagespeed;

    # Exclusions
    include server/exclusions.conf;

    # Security
    include server/security.conf;

    # Static Content
    include server/static-files.conf;

    # Fastcgi cache rules
    include server/fastcgi-cache.conf;

    # SSL rules - uncomment if using SSL.
    # include server/ssl-{{ inventory_hostname }}.conf;
    # include server/ssl.conf;

    #mod_pagespeed configurations
    pagespeed on;

    #force lowercase
    location ~ [A-Z] {
        rewrite ^(.*)$ http://{{ inventory_hostname }}$uri_lowercase;
    }
    
    # Ensure requests for pagespeed optimized resources go to the pagespeed handler
    # and no extraneous headers get set.
    location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
        add_header "" "";
    }
    location ~ "^/pagespeed_static/" { }
    location ~ "^/ngx_pagespeed_beacon$" { }

    #disallow on admin url
    pagespeed Disallow */wp-admin/*;

    # Configuring PageSpeed Filter
    pagespeed RewriteLevel PassThrough;
    #pagespeed RewriteLevel CoreFilters;
    pagespeed EnableFilters add_head,combine_css,combine_javascript,convert_meta_tags,extend_cache,fallback_rewrite_css_urls,flatten_css_imports,inline_css,inline_import_to_link,inline_javascript,rewrite_css,rewrite_images,rewrite_javascript,rewrite_style_attributes_with_url;

    #image handling
    pagespeed EnableFilters responsive_images,responsive_images_zoom,lazyload_images,recompress_images,recompress_jpeg,recompress_png,resize_images,jpeg_subsampling,resize_rendered_image_dimensions,strip_image_meta_data;
    
    pagespeed EnableFilters sprite_images;

    #image path for lazyloading image placeholder
    pagespeed LazyloadImagesBlankUrl "https://www.gstatic.com/psa/static/1.gif";

    #above the fold
    pagespeed EnableFilters defer_javascript;
    pagespeed EnableFilters prioritize_critical_css;

    # html optimization
    pagespeed EnableFilters insert_dns_prefetch;
    pagespeed EnableFilters collapse_whitespace,remove_comments;
    pagespeed EnableFilters canonicalize_javascript_libraries;

    # GA async
    pagespeed EnableFilters make_google_analytics_async;

    # Google fonts
    pagespeed FetchHttps enable;
    pagespeed EnableFilters inline_google_font_css;

    #additional domains
    pagespeed Domain {{ inventory_hostname }};

    #pagespeed MaxSegmentLength 250;
    #cache ser
    pagespeed MemcachedThreads 1;
    pagespeed MemcachedServers "127.0.0.1:11211";
    
    #if blocking access, use this to allow deployment
    #location /deploy {
    #		try_files $uri $uri/ /index.php?$args;
    #}
    #if blocking access, use this to allow letsencrypt
    #location /.well-known {
    #		try_files $uri $uri/ /index.php?$args;
    #}

    location / {
    		try_files $uri $uri/ /index.php?$args;
            #auth required to view site if you want to keep it private.
            #auth_basic "Restricted Content";
            #auth_basic_user_file /etc/nginx/.htpasswd;

            #robot no index for dev site   
            #add_header  X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";
    }

    location ~ \.php$ {
    		try_files $uri =404;
    		include global/fastcgi-params.conf;

    		fastcgi_pass unix:/run/php/php7.2-fpm.sock;

    		# Skip cache based on rules in global/server/fastcgi-cache.conf.
    		fastcgi_cache_bypass $skip_cache;
    		fastcgi_no_cache $skip_cache;

    		# Define memory zone for caching. Should match key_zone in fastcgi_cache_path above.
    		fastcgi_cache {{ inventory_hostname }};

    		# Define caching time.
    		fastcgi_cache_valid 730h;
    }

}

# Redirect http to https
#server {
    #    listen 80;
    #    listen [::]:80;
    #   server_name {{ inventory_hostname }} www.{{ inventory_hostname }};
    #    return 301 https://{{ inventory_hostname }}$request_uri;
#}

# Redirect www to non-www
#server {
    #    listen 443;
    #    listen [::]:443;
    #    server_name www.{{ inventory_hostname }};
    #    return 301 https://{{ inventory_hostname }}$request_uri;
#}